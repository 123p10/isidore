extern double printd(double d);

//Init, Definitions
class Node = {
	int val;
	Node next;
}

class Array = {
	int size;
	Node first;
}
int init(Array arr){
	arr.size = 0;
	return 0;
}




//Add/Push_back functions
int input(Node curr, Node insert, int size){
	if(size == 1){
		curr.next = insert;
		return 0;
	}
	return input(curr.next,insert,size-1);
}
int add(Array arr,Node n){
	if(arr.size == 0){
		arr.first = n;
		arr.size = 1;
		return 0;
	}
	input(arr.first,n,arr.size);
	arr.size += 1;
	return 0;
}
int push_back(Array arr, int i){
	Node t;
	t.val = i;
	add(arr,t);
	return i;
}






//Get Functions
Node get_h(Node curr, int c){
	if(c == 0){
		return curr;
	}
	return get_h(curr.next,c-1);
}

Node get(Array arr, int index){
	return get_h(arr.first,index);
}

int get_val(Array arr,int index){
	Node tmp;
	tmp = get(arr,index);
	return tmp.val;
}



//Printing functions
int printn(Node curr, int c){
	if(c == 0){
		return 0;
	}
	printd(curr.val);
	printn(curr.next,c-1);
	return 0;
}

int print(Array arr){
	printn(arr.first,arr.size);
	return 0;
}


//Remove Functions
int remove(Array arr, int n){
	if(n >= arr.size || arr.size < 0){
		return 0;
	}
	if(n == 0){
		if(arr.size > 1){
			Node front = arr.first;
			arr.first = front.next;
		}
	}
	else{
		if(n < arr.size-1){
			Node before;
			before = get(arr,n-1);
			Node c; 
			c = before.next;
			before.next = c.next;
		}
	}
	arr.size -= 1;
	return 1;
}





