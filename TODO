ALWAYS REMOVE WARNINGS
Constant TODOS
    Always ensure no warnings are outputted by g++
    Convert and maintain codebase to follow: https://www.perforce.com/blog/kw/NASA-rules-for-developing-safety-critical-code
    Update Documentation
High Level TODO 
    Add functions to classes
    Syntax Definition
        Implement while statements
        Think about whether we use int main() or compile inline commands
            deprecate TopLevelExpressions
        foreach loop
    Workflow/compilation
<<<<<<< HEAD
=======
        Allow toggling of code optimizations
>>>>>>> e61b8c863af3976a63f4bf3a485b03cb534eb498
        Debugger
        Compile to executables
    Data
        Take certain constructs out of expressions, make instructions(if,var,for)
            Then make it so we don't need semicolons for these constructs in statement lists, (no if(){};)
        Fix variable scopage(vars declared inside ifs should not be accessible after)
            Probably going to have to adjust NamedValues to have other elements
<<<<<<< HEAD
=======
        String
>>>>>>> e61b8c863af3976a63f4bf3a485b03cb534eb498
        Function prototypes
        Garbage Collection
        void type
        Add array initialization like = [1,2,3]
    Error Handling(SO much todo here)
        Proper error handling functions
        Develop verbose error outputs, line numbering, keywords, etc.
    Compile Time
        Improve standard Kaleidiscope JIT
    Documentation
        How to build source
        How to compile files
        How to write Isidore code
        Show outputs of example file
        Define Isidore, purpose of naming and why certain features are the way they are
    Linting
<<<<<<< HEAD
    Add direct or implicit casting for stuff like return types
    Scan files for function prototypes




=======
    Put micro compiler in browser
        Pretty simple
        Page with textbox press compile
            python/go script then runs constantly pulling git repo and posts the terminal output
    Add direct or implicit casting for stuff like return types
    Scan files for funciton prototypes
>>>>>>> e61b8c863af3976a63f4bf3a485b03cb534eb498
Low Level TODO
    Function/operators(very easy to make but develop a proper way to insert into standard library)
        ++/--
        Review level of precedence
        Add postfix
        !
        /
        Add . as an operator
        *
        ^
        Update docs
    Quick Fixes
        Add ],; to ParsePrimary to skip expression
        Better storage of getCurrToken()
        Remove semi colons from if,for statements
        Fix for statements always running once
        Cast function calls to proper types
    Not so quick Fixes
<<<<<<< HEAD
		Consider moving weird booleans to ENUMS
=======
>>>>>>> e61b8c863af3976a63f4bf3a485b03cb534eb498
        Add arrays to parameters of functions
        Should we keep overflows 
        Develop proper handling of semi colons(right now they are checked on a case by case basis)
        If else statement exists we shouldn't need to return at the end
        Short circuit boolean evaluation
        Fix boolean expressions(|| &&)

<<<<<<< HEAD
=======
Examples
    Sorting Algorithm
>>>>>>> e61b8c863af3976a63f4bf3a485b03cb534eb498
